{"version":3,"sources":["../node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisFillCircular.js","../node_modules/@amcharts/amcharts4/.internal/charts/axes/GridCircular.js","../node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisLabelCircular.js","../node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRendererCircular.js","../node_modules/@amcharts/amcharts4/.internal/core/responsive/ResponsiveDefaults.js"],"names":["AxisFillCircular_AxisFillCircular","_super","AxisFillCircular","axis","_this","call","this","className","element","paper","add","radius","Object","Percent","applyTheme","tslib_es6","prototype","draw","renderer","fillPath","getPositionRangePath","startPosition","endPosition","Type","innerRadius","cornerRadius","path","defineProperty","get","getPropertyValue","set","value","setPercentProperty","enumerable","configurable","setPropertyValue","AxisFill","Registry","registeredClasses","GridCircular_GridCircular","GridCircular","pixelPerfect","AxisLabelCircular_AxisLabelCircular","AxisLabelCircular","fdx","fdy","padding","location","isMeasured","pixelRadius","axisRadius","sign","inside","Utils","fixPoint","point","angle","utils_Math","Math","atan2","y","x","invalid","validate","relativeRotation","dy","_measuredHeight","dx","_measuredWidth","labelRadius","pixelWidth","bbox","width","pixelHeight","height","rotation","dH","dW","pixelPaddingBottom","pixelPaddingTop","pixelPaddingLeft","pixelPaddingRight","AxisLabel","AxisRendererCircular_AxisRendererCircular","AxisRendererCircular","pixelRadiusReal","layout","startAngle","endAngle","useChartAngles","grid","template","labels","ticks","tooltipLocation","line","strokeOpacity","setAxis","tooltip","adapter","target","pixelX","pixelY","cos","sin","chart","PI","invalidate","positionToPoint","position","coordinate","positionToCoordinate","axisLength","positionToAngle","arc","end","start","inversed","updateAxisLine","Path","updateGridElement","gridInnerRadius","zIndex","toggleVisibility","updateTickElement","tick","tickLength","length","updateLabelElement","label","positionItem","minLabelPosition","maxLabelPosition","fitsToBounds","pixelInnerRadius","createGrid","createFill","createLabel","AxisRenderer","__webpack_exports__","relevant","container","state","object","stateId","states","create","properties","AxisRendererY","SmallMap","disabled","ZoomControl","Chart","marginLeft","marginRight","Legend","AxisRendererX","marginTop","marginBottom"],"mappings":"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","file":"static/js/4.1c0f92c5.chunk.js","sourcesContent":["import * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AxisFill } from \"./AxisFill\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\n\nvar AxisFillCircular =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AxisFillCircular, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {Axis} axis Axis\r\n   */\n\n\n  function AxisFillCircular(axis) {\n    var _this = _super.call(this, axis) || this;\n\n    _this.className = \"AxisFillCircular\";\n    _this.element = _this.paper.add(\"path\");\n    _this.radius = percent(100);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the fill element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisFillCircular.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    if (this.axis) {\n      var renderer = this.axis.renderer;\n      this.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\n      this.path = this.fillPath;\n    }\n  };\n\n  Object.defineProperty(AxisFillCircular.prototype, \"innerRadius\", {\n    /**\r\n     * @return {number} Inner radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n     *\r\n     * @param {number | Percent}  value  Inner radius\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisFillCircular.prototype, \"radius\", {\n    /**\r\n     * @return {number} Outer radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n     *\r\n     * @param {number | Percent}  value  Outer radius\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisFillCircular.prototype, \"cornerRadius\", {\n    /**\r\n     * @return {number} Corner radius (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"cornerRadius\");\n    },\n\n    /**\r\n     * Corner radius for the fill. In pixels.\r\n     *\r\n     * @param {number}  value  Corner radius (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"cornerRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AxisFillCircular;\n}(AxisFill);\n\nexport { AxisFillCircular };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\nimport * as tslib_1 from \"tslib\";\nimport { Grid } from \"./Grid\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\n\nvar GridCircular =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(GridCircular, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function GridCircular() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"GridCircular\";\n    _this.pixelPerfect = false;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(GridCircular.prototype, \"innerRadius\", {\n    /**\r\n     * @return {number} Inner radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Inner radius of the circular grid. (absolute or relative)\r\n     *\r\n     * @param {number | Percent} value Inner radius\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCircular.prototype, \"radius\", {\n    /**\r\n     * @return {number} Outer radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Outer radius of the circular grid. (absolute or relative)\r\n     *\r\n     * @param {number | Percent} value Outer radius\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return GridCircular;\n}(Grid);\n\nexport { GridCircular };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;","/**\r\n * Axis Label module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AxisLabel } from \"./AxisLabel\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\n\nvar AxisLabelCircular =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AxisLabelCircular, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function AxisLabelCircular() {\n    var _this = _super.call(this) || this;\n    /**\r\n     *\r\n     * @type {number}\r\n     * @ignore\r\n     */\n\n\n    _this.fdx = 0;\n    /**\r\n     *\r\n     * @type {number}\r\n     * @ignore\r\n     */\n\n    _this.fdy = 0;\n    _this.className = \"AxisLabelCircular\";\n\n    _this.padding(0, 0, 0, 0);\n\n    _this.location = 0.5;\n    _this.radius = 0;\n    _this.isMeasured = false;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(AxisLabelCircular.prototype, \"relativeRotation\", {\n    /**\r\n     * @return {number} Rotation angle\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"relativeRotation\");\n    },\n\n    /**\r\n     * Relative rotation of the label.\r\n     *\r\n     * It is an angle to circle. In case 90, labels will be positioned like rays\r\n     * of light, if 0 - positione along the circle.\r\n     *\r\n     * @param {number} value Rotation angle\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"relativeRotation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisLabelCircular.prototype, \"radius\", {\n    /**\r\n     * @return {number} Distance (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Distance from axis circle to label in pixels or percent.\r\n     *\r\n     * @param {number} value Distance (px or percent)\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * returns label radius in pixels\r\n   */\n\n  AxisLabelCircular.prototype.pixelRadius = function (axisRadius) {\n    var sign = 1;\n\n    if (this.inside) {\n      sign = -1;\n    }\n\n    return $utils.relativeToValue(this.radius, axisRadius) * sign;\n  };\n  /**\r\n   * [fixPoint description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param  {IPoint}  point       Label affixation point\r\n   * @param  {number}  axisRadius  Distance from point (px)\r\n   * @return {IPoint}              [description]\r\n   */\n\n\n  AxisLabelCircular.prototype.fixPoint = function (point, axisRadius) {\n    var angle = $math.DEGREES * Math.atan2(point.y, point.x);\n\n    if (this.invalid) {\n      this.validate(); //@todo\" check if we need this\n    }\n\n    var relativeRotation = this.relativeRotation; // we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\n    // this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\n    // @todo with this math doesn't work well with inside = true\n\n    this.dy = -this._measuredHeight * (1 - (point.y + axisRadius) / (2 * axisRadius)); // simmilar with dx\n\n    this.dx = -this._measuredWidth * (1 - (point.x + axisRadius) / (2 * axisRadius));\n    var labelRadius = this.pixelRadius(axisRadius);\n\n    if ($type.isNumber(relativeRotation)) {\n      var pixelWidth = this.bbox.width;\n      var pixelHeight = this.bbox.height;\n\n      if (angle > 90 || angle < -90) {\n        if (relativeRotation == -90) {\n          relativeRotation = 90;\n          pixelWidth = 0;\n        }\n      } else {\n        if (relativeRotation == -90) {\n          pixelHeight = -pixelHeight;\n        }\n\n        if (relativeRotation == 90) {\n          relativeRotation = -90;\n          pixelWidth = 0;\n          pixelHeight = -pixelHeight;\n        }\n      }\n\n      this.rotation = relativeRotation + angle + 90;\n      var dH = $math.sin(relativeRotation) / 2;\n      var dW = $math.cos(relativeRotation) / 2;\n      var rotation = this.rotation;\n      this.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\n      this.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\n      var pixelPaddingBottom = this.pixelPaddingBottom;\n      var pixelPaddingTop = this.pixelPaddingTop;\n      var pixelPaddingLeft = this.pixelPaddingLeft;\n      var pixelPaddingRight = this.pixelPaddingRight;\n\n      if (!this.inside) {\n        labelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\n      } else {\n        if (angle > 90 || angle < -90) {\n          labelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\n        } else {\n          labelRadius += (pixelPaddingBottom + this.bbox.height + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight + this.bbox.width) * $math.sin(relativeRotation);\n        }\n      }\n    }\n\n    this.fdx = this.dx;\n    this.fdy = this.dy;\n    point.x += $math.cos(angle) * labelRadius;\n    point.y += $math.sin(angle) * labelRadius;\n    return point;\n  };\n\n  return AxisLabelCircular;\n}(AxisLabel);\n\nexport { AxisLabelCircular };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AxisRenderer } from \"./AxisRenderer\";\nimport { AxisFillCircular } from \"./AxisFillCircular\";\nimport { GridCircular } from \"./GridCircular\";\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\nimport { registry } from \"../../core/Registry\";\nimport { percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A renderer for circular axis.\r\n */\n\nvar AxisRendererCircular =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AxisRendererCircular, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param {Axis} axis Related axis\r\n   */\n\n\n  function AxisRendererCircular() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * @ignore\r\n     */\n\n\n    _this.pixelRadiusReal = 0; // axis.layout = \"none\"; // does not trigger redraw when size changes\n\n    _this.layout = \"none\";\n    _this.className = \"AxisRendererCircular\";\n    _this.isMeasured = false;\n    _this.startAngle = -90;\n    _this.endAngle = 270;\n    _this.useChartAngles = true;\n    _this.radius = percent(100);\n    _this.isMeasured = false;\n    _this.grid.template.location = 0;\n    _this.labels.template.location = 0;\n    _this.labels.template.radius = 15;\n    _this.ticks.template.location = 0;\n    _this.ticks.template.pixelPerfect = false;\n    _this.tooltipLocation = 0;\n    _this.line.strokeOpacity = 0;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n  * @ignore\r\n  */\n\n\n  AxisRendererCircular.prototype.setAxis = function (axis) {\n    var _this = this;\n\n    _super.prototype.setAxis.call(this, axis);\n\n    axis.isMeasured = false; // modify x and y so that tooltip would always be on circle\n\n    var tooltip = axis.tooltip;\n    tooltip.adapter.add(\"dx\", function (x, target) {\n      var point = $utils.svgPointToSprite({\n        x: target.pixelX,\n        y: target.pixelY\n      }, _this);\n      return _this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\n    });\n    tooltip.adapter.add(\"dy\", function (y, target) {\n      var point = $utils.svgPointToSprite({\n        x: target.pixelX,\n        y: target.pixelY\n      }, _this);\n      return _this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\n    });\n  };\n  /**\r\n   * Validates Axis renderer.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererCircular.prototype.validate = function () {\n    // so that radius would be updated\n    if (this.chart && this.chart.invalid) {\n      this.chart.validate();\n    }\n\n    _super.prototype.validate.call(this);\n  };\n\n  Object.defineProperty(AxisRendererCircular.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return {number} Length (px)\r\n     */\n    get: function get() {\n      return 2 * Math.PI * this.pixelRadius;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"radius\", {\n    /**\r\n     * @return {number | Percent} Outer radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Outer radius of the axis.\r\n     *\r\n     * Can be absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param {number | Percent}  value  Outer radius\r\n     */\n    set: function set(value) {\n      if (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\n        if (this.axis) {\n          this.axis.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"pixelRadius\", {\n    /**\r\n     * Outer radius in pixels.\r\n     *\r\n     * @return {number} Outer radius (px)\r\n     */\n    get: function get() {\n      return $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"innerRadius\", {\n    /**\r\n     * @return {number | Percent} Inner radius\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Inner radius of the axis.\r\n     *\r\n     * Can be absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param {number | Percent}  value  Inner radius\r\n     */\n    set: function set(value) {\n      if (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\n        if (this.axis) {\n          this.axis.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"useChartAngles\", {\n    /**\r\n     * @return {boolean} Use chart angles\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"useChartAngles\");\n    },\n\n    /**\r\n     * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n     * inherit them from relative properties from chart.\r\n     *\r\n     * @default false\r\n     * @param {boolean}  value  Use chart's angles\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"useChartAngles\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * Inner radius in pixels.\r\n     *\r\n     * @return {number} Inner radius (px)\r\n     */\n    get: function get() {\n      return $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @param  {number}  position  Position (0-1)\r\n   * @return {IPoint}            Point\r\n   */\n\n  AxisRendererCircular.prototype.positionToPoint = function (position) {\n    var coordinate = this.positionToCoordinate(position);\n    var angle = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\n    return {\n      x: this.pixelRadius * $math.cos(angle),\n      y: this.pixelRadius * $math.sin(angle)\n    };\n  };\n  /**\r\n   * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n   *\r\n   * @param  {number}  position  Position (0-1)\r\n   * @return {number}            Angle (0-360)\r\n   */\n\n\n  AxisRendererCircular.prototype.positionToAngle = function (position) {\n    var axis = this.axis;\n    var arc = (this.endAngle - this.startAngle) / (axis.end - axis.start);\n    var angle;\n\n    if (axis.renderer.inversed) {\n      angle = this.startAngle + (axis.end - position) * arc;\n    } else {\n      angle = this.startAngle + (position - axis.start) * arc;\n    }\n\n    return $math.round(angle, 3);\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererCircular.prototype.updateAxisLine = function () {\n    var radius = this.pixelRadius;\n    var startAngle = this.startAngle;\n    var endAngle = this.endAngle;\n    var arc = endAngle - startAngle;\n    this.line.path = $path.moveTo({\n      x: radius * $math.cos(startAngle),\n      y: radius * $math.sin(startAngle)\n    }) + $path.arcTo(startAngle, arc, radius, radius);\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param {Grid}    grid         Grid element\r\n   * @param {number}  position     Starting position\r\n   * @param {number}  endPosition  End position\r\n   */\n\n\n  AxisRendererCircular.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position);\n\n    if (grid.element) {\n      var angle = $math.DEGREES * Math.atan2(point.y, point.x);\n      var radius = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\n      var gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\n      grid.zIndex = 0;\n      var innerRadius = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\n      grid.path = $path.moveTo({\n        x: innerRadius * $math.cos(angle),\n        y: innerRadius * $math.sin(angle)\n      }) + $path.lineTo({\n        x: radius * $math.cos(angle),\n        y: radius * $math.sin(angle)\n      });\n    }\n\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param {AxisTick}  tick         Tick element\r\n   * @param {number}    position     Starting position\r\n   * @param {number}    endPosition  End position\r\n   */\n\n\n  AxisRendererCircular.prototype.updateTickElement = function (tick, position, endPosition) {\n    position = position + (endPosition - position) * tick.location;\n    var point = this.positionToPoint(position);\n\n    if (tick.element) {\n      var radius = this.pixelRadius;\n      var angle = $math.DEGREES * Math.atan2(point.y, point.x);\n      var tickLength = tick.length;\n\n      if (tick.inside) {\n        tickLength = -tickLength;\n      }\n\n      tick.zIndex = 1;\n      tick.path = $path.moveTo({\n        x: radius * $math.cos(angle),\n        y: radius * $math.sin(angle)\n      }) + $path.lineTo({\n        x: (radius + tickLength) * $math.cos(angle),\n        y: (radius + tickLength) * $math.sin(angle)\n      });\n    }\n\n    this.toggleVisibility(tick, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param {AxisLabel}  label        Label element\r\n   * @param {number}     position     Starting position\r\n   * @param {number}     endPosition  Ending position\r\n   */\n\n\n  AxisRendererCircular.prototype.updateLabelElement = function (label, position, endPosition, location) {\n    if (!$type.hasValue(location)) {\n      location = label.location;\n    }\n\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    label.fixPoint(point, this.pixelRadius);\n    label.zIndex = 2;\n    this.positionItem(label, point);\n    this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\n  };\n  /**\r\n   * Checks if point is within bounds of a container.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param  {IPoint}   point Point coordinates\r\n   * @return {boolean}         Fits?\r\n   */\n\n\n  AxisRendererCircular.prototype.fitsToBounds = function (point) {\n    return true;\n  };\n\n  Object.defineProperty(AxisRendererCircular.prototype, \"startAngle\", {\n    /**\r\n     * @return {number} Start angle\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"startAngle\");\n    },\n\n    /**\r\n     * Start angle of the axis in degrees (0-360).\r\n     *\r\n     * @param {number}  value  Start angle\r\n     */\n    set: function set(value) {\n      // do not normalize angel here!\n      if (this.setPropertyValue(\"startAngle\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"endAngle\", {\n    /**\r\n     * @return {number} End angle\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"endAngle\");\n    },\n\n    /**\r\n     * End angle of the axis in degrees (0-360).\r\n     *\r\n     * @param {number}  value  End angle\r\n     */\n    set: function set(value) {\n      // do not normalize angel here!\n      if (this.setPropertyValue(\"endAngle\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param  {number}  startPosition  Starting position\r\n   * @param  {number}  endPosition    End position\r\n   * @return {string}                 SVG path\r\n   */\n\n  AxisRendererCircular.prototype.getPositionRangePath = function (startPosition, endPosition, radius, innerRadius, cornerRadius) {\n    var path = \"\";\n\n    if ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\n      if (!$type.hasValue(radius)) {\n        radius = this.radius;\n      }\n\n      startPosition = $math.max(startPosition, this.axis.start);\n      endPosition = $math.min(endPosition, this.axis.end);\n\n      if (endPosition < startPosition) {\n        endPosition = startPosition;\n      }\n\n      var pixelRadius = $utils.relativeRadiusToValue(radius, this.pixelRadius);\n      var pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\n      var startAngle = this.positionToAngle(startPosition);\n      var endAngle = this.positionToAngle(endPosition);\n      var arc = endAngle - startAngle;\n      path = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\n    }\n\n    return path;\n  };\n  /**\r\n   * Returns a new grid element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return {GridCircular} Grid element\r\n   */\n\n\n  AxisRendererCircular.prototype.createGrid = function () {\n    return new GridCircular();\n  };\n  /**\r\n   * Returns a new fill element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return {AxisFillCircular} Fill element\r\n   */\n\n\n  AxisRendererCircular.prototype.createFill = function (axis) {\n    return new AxisFillCircular(axis);\n  };\n  /**\r\n   * Returns a new label element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return {AxisLabelCircular} Label element\r\n   */\n\n\n  AxisRendererCircular.prototype.createLabel = function () {\n    return new AxisLabelCircular();\n  };\n\n  return AxisRendererCircular;\n}(AxisRenderer);\n\nexport { AxisRendererCircular };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;","/**\r\n * Defines default Responsive rules\r\n * @hidden\r\n */\nimport { AxisRenderer } from \"../../charts/axes/AxisRenderer\";\nimport { AxisRendererX } from \"../../charts/axes/AxisRendererX\";\nimport { AxisRendererY } from \"../../charts/axes/AxisRendererY\";\nimport { AxisRendererCircular } from \"../../charts/axes/AxisRendererCircular\";\nimport { Chart } from \"../../charts/Chart\";\nimport { Legend } from \"../../charts/Legend\";\nimport { SmallMap } from \"../../charts/map/SmallMap\";\nimport { ZoomControl } from \"../../charts/map/ZoomControl\";\n/**\r\n * ============================================================================\r\n * RULES\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Default rules.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Do not create states for objects that do not have any overrides\r\n */\n\nexport default [\n/**\r\n * --------------------------------------------------------------------------\r\n * Microcharts and sparklines\r\n * W<=100 || H<=100\r\n * @todo\r\n */\n{\n  relevant: function relevant(container) {\n    if (container.pixelWidth <= 100 || container.pixelHeight <= 100) {\n      return true;\n    }\n\n    return false;\n  },\n  state: function state(object, stateId) {\n    // Put vertical axis labels inside\n    if (object instanceof AxisRenderer) {\n      var state = object.states.create(stateId);\n      state.properties.minLabelPosition = 1;\n      state.properties.maxLabelPosition = 0;\n      return state;\n    }\n  }\n},\n/**\r\n * --------------------------------------------------------------------------\r\n * Narrow\r\n * W<=200\r\n */\n{\n  relevant: function relevant(container) {\n    if (container.pixelWidth <= 200) {\n      return true;\n    }\n\n    return false;\n  },\n  state: function state(object, stateId) {\n    // Put vertical axis labels inside\n    if (object instanceof AxisRendererY) {\n      var state = object.states.create(stateId);\n      state.properties.inside = true;\n      return state;\n    }\n\n    if (object instanceof AxisRendererCircular) {\n      var state = object.states.create(stateId);\n      state.properties.inside = true;\n      return state;\n    }\n\n    if (object instanceof SmallMap) {\n      var state = object.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n    /*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n        let state = object.states.create(stateId);\r\n        state.properties.height = 0;\r\n        return state;\r\n    }*/\n\n\n    if (object instanceof ZoomControl) {\n      var state = object.states.create(stateId);\n      state.properties.layout = \"vertical\";\n      return state;\n    }\n\n    if (object instanceof Chart) {\n      var state = object.states.create(stateId);\n      state.properties.marginLeft = 0;\n      state.properties.marginRight = 0;\n      return state;\n    }\n\n    if (object instanceof Legend && (object.position == \"left\" || object.position == \"right\")) {\n      var state = object.states.create(stateId);\n      state.properties.position = \"bottom\";\n      return state;\n    }\n  }\n},\n/**\r\n * --------------------------------------------------------------------------\r\n * Short\r\n * H<=200\r\n */\n{\n  relevant: function relevant(container) {\n    if (container.pixelHeight <= 200) {\n      return true;\n    }\n\n    return false;\n  },\n  state: function state(object, stateId) {\n    // Put vertical axis labels inside\n    if (object instanceof AxisRendererX) {\n      var state = object.states.create(stateId);\n      state.properties.inside = true;\n      return state;\n    }\n\n    if (object instanceof AxisRendererCircular) {\n      var state = object.states.create(stateId);\n      state.properties.inside = true;\n      return state;\n    }\n\n    if (object instanceof SmallMap) {\n      var state = object.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n    /*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n        let state = object.states.create(stateId);\r\n        state.properties.width = 100;\r\n        return state;\r\n    }*/\n\n\n    if (object instanceof ZoomControl) {\n      var state = object.states.create(stateId);\n      state.properties.layout = \"horizontal\";\n      return state;\n    }\n\n    if (object instanceof Chart) {\n      var state = object.states.create(stateId);\n      state.properties.marginTop = 0;\n      state.properties.marginBottom = 0;\n      return state;\n    }\n\n    if (object instanceof Legend && (object.position == \"bottom\" || object.position == \"top\")) {\n      var state = object.states.create(stateId);\n      state.properties.position = \"right\";\n      return state;\n    }\n  }\n},\n/**\r\n * --------------------------------------------------------------------------\r\n * Super-small\r\n * W<=200 && H<=200\r\n */\n{\n  relevant: function relevant(container) {\n    if (container.pixelWidth <= 200 && container.pixelHeight <= 200) {\n      return true;\n    }\n\n    return false;\n  },\n  state: function state(object, stateId) {\n    // Hide legend\n    if (object instanceof Legend) {\n      var state = object.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n\n    if (object instanceof ZoomControl) {\n      var state = object.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n  }\n}];"],"sourceRoot":""}